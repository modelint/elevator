--
Cabin.Estimate delay( calling floor : Floor name, call dir : Direction ) : Duration
--

//
// Returns an estimate of the time it will take for this cabin to service the given floor call
//
// The algorithm is described and illustrated in the Bank Select technical note: mint.elevator.tn.6
// You will definitely want to look at the illustrations to follow the logic in this activity

// Set start, destination, and direction data
//
calling floor name, calling height = Floor( Name: ^calling floor ).(Name, Height)
cabin floor name, cabin height = /R43/R28/Floor.(Name, Height)

// Check the easy case first
(calling floor name == cabin floor name)?
    =>> Duration[0] // We're already there!
    : {
    // Compute the estimated duration

    // Set useful shaft distances
    top floor height = /R2/Shaft/Floor(^+Height).Height // Highest floor
    bottom floor height = /R2/Shaft/Floor(^-Height).Height // Lowest floor
    floor gap = Building(1).Average floor gap // Singleton selection

    // Set useful direction and cabin position relative to the calling floor
    calling up, calling down = (^call dir == _up) // LHS flows are set to TRUE/FALSE based on condition and then opposite
    cabin high, cabin low = (cabin height > calling height)

    // Two key factors determine the number of end of shaft reversals required to reach
    // the calling floor:
    //     1) Has the cabin gone past the call direction with regard to its current travel direction?
    //     2) Is our travel direction the same as the call direction?
    //
    behind the call arrow = ( cabin low AND calling up ) OR ( cabin high AND calling down ) //1
    dir match = (Travel direction == ^call dir) //2

    // Make this table by joining related Accessible Shaft Level instances with all instances of the Floor class
    // Note that the Floor.Name attribute is renamed to Floor to make the join work
    // --- aslevs with height ---
    // | Floor | Shaft | Bank | Stop Requested | Height |
    // ---
    aslevs with height #= /R2/R28/R3/Accessible Shaft Level ## Floor[Name >> Floor](*)

    // One of the four possible location/travel direction combinations with respect to the calling floor position and
    // direction will be processed. Each of these four cases is mutually exclusive since we are checking all
    // combinations of the dir_match and behind_the_call_arrow booleans.

    (dir match AND behind the call arrow)? {
        //
        // Route 1: Cabin is moving in the same direction and behind call arrow
        // ..[cab->]....(call->)
        //
        // Route which has only one leg, easiest case to compute
        //
        // Legs:
        //   a> Toward call in correct direction

        // Count stops and calls in the Cabin's travel direction only (ignore reverse calls).
        // Don't count the cabin or calling floor

        // .between_ee is an operation defined on the Distance type where _xx signifies exclusive on both ends
        countable aslevs::Accessible Shaft Level ..= aslevs with height( Height.between_xx(calling height, cabin height) )
        num stops = .Count stops oneway( aslevs: countable aslevs, search dir: Travel direction )
        distance = cabin height - calling height
    }

    (dir match AND NOT behind the call arrow)? {
        //
        // Route 2: Cabin is moving in the same direction, but is ahead of the call arrow
        // ..(call->)....[cab->]
        //
        // Legs:
        //
        //   a> to turn 1 (top or bottom of shaft) and back
        //   b> toward the calling floor in the opposite direction passing it
        //   c> to turn 2 (opposite of turn 1) and then back to the calling floor
        //      in the matching direction where it will be serviced
        //

        // Set turn 1 and 2 to the appropriate shaft ends
        cabin high ?
            turn1, turn2 = top floor height, bottom floor height
            : turn1, turn2 = bottom floor height, top floor height

        // 2a> Toward turn 1
        countable aslevs to turn1::Accessible Shaft Level ..= aslevs with height( Height.between_xi(cabin height, turn1) )
        num turn1 stops = .Count stops roundtrip( aslevs: countable aslevs to turn1 )
        turn1 roundtrip distance = (cabin height - turn1) * Integer[2] + floor gap

        // 2b> From the nearest accessible shaft level to the calling floor
        countable aslevs to calling floor reverse::Accessible Shaft Level ..= aslevs with height( Height.between_xi(cabin height, calling height) )
        num reverse to calling floor stops = .Count stops oneway( aslevs: countable aslevs to calling floor reverse, search dir: Travel direction.opposite() )
        distance to calling floor reverse = cabin height.separation(calling height)

        // 2c> To turn 2 and back to the calling floor
        countable aslevs to turn2::Accessible Shaft Level ..= aslevs with height( Height.between_xi(calling height, turn2) )
        num turn2 stops = .Count stops roundtrip( aslevs: countable aslevs to turn2 )
        turn2 roundtrip distance = (cabin height - turn2) * Integer[2]

        // Tally up the stops and total distance for all legs
        num stops = num turn1 stops + num reverse to calling floor stops + num turn2 stops
        distance = turn1 roundtrip distance + distance to calling floor reverse + turn2 roundtrip distance
    }

    (NOT dir match AND behind the call arrow)? {
        //
        // Route 3: Cabin is moving opposite the calling direction behind the call
        //
        // Legs:
        //
        // a> toward the end of the top or bottom of shaft
        // b> back twoard the call in the service direction
        //

        // 3a> To end of shaft and back to the current location
        cabin high ? turn = top fheight
                   : turn = bottom fheight

        countable aslevs to turn::Accessible Shaft Level ..= aslevs with height( Height.between_xx(cabin height, turn) )
        num turn stops = .Count stops roundtrip( aslevs: countable aslevs )
        turn roundrip distance = (cabin height - turn) * Integer[2]

        // 3b> back toward call in service direction
        countable aslevs to calling floor::Accessible Shaft Level ..= aslevs with height(Height.between_xi(cabin height, calling height)
        num stops to calling floor = .Count stops oneway( aslevs: countable aslevs to calling floor, service dir: Travel direction.opposite())
        reverse distance to calling floor = cabin height - calling height

        // Tally up the stops and total distance for all legs
        num stops = num turn stops + num stops to calling floor
        distance = turn roundtrip distance + reverse distance to calling floor
    }

    (NOT dir match AND NOT behind the call arrow)? {
        //
        // Route 4: Cabin is moving in the opposite direction ahead of the call
        //
        // Legs:
        //
        // a> Toward call in opposite direction
        // b> Toward top or bottom of shaft and back

        // 4a> Toward call in opposite direction
        countable aslevs to calling floor reverse::Accessible Shaft Level ..= aslevs with height( Height.between_ii(cabin height, calling height) )
        num reverse to calling floor stops  = .Count stops oneway( aslevs: countable aslevs to calling floor reverse, service dir: Travel direction.opposite())
        distance to calling floor reverse = cabin height - calling height

        // 4b> Toward top or bottom of shaft and back
        cabin high?
            turn = bottom fheight :
            turn = top fheight

        countable aslevs to turn::Accessible Shaft Level ..= aslevs with height( Height.between_xi(calling height, turn) )
        num stops to turn = .Count stops roundtrip( aslevs: countable aslevs to turn )
        distance to turn = (cabin height - turn) * Integer[2]

        // Tally up the stops and total distance for all legs
        num stops = num reverse to calling floor stops + num stops to turn
        distance = distance to calling floor reverse + distance to turn
    }

    // Compute total delays due to distance traveled and number of stops
    transit delay = distance / /R2/R1/Bank.Average cabin speed
    stop delay = num stops * /R2/R1/Bank.Average stop duration

    =>> transit delay + stop delay
}
