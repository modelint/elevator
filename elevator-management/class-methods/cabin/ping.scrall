//
// Cabin.Ping( dir: Direction ) : Accessible Shaft Level
//
// Search ahead of the Cabin in the indicated direction
// return the nearest ASL with a stop request and/or a Floor Service calling
// in that direction. If none is found, return the empty set.

// Get all aslevs that are calling in the search dir or requesting a stop in my shaft
// and join with the floor class to get distances

shaft aslevs ..= /R2/R28/Shaft Level/R3/Accessible Shaft Level // Floor, Shaft, Bank, Stop requested
requested stops ..= shaft aslevs( Stop requested ) // Floor, Shaft, Bank, Stop requested

// Join shaft aslevs with related Floor Service instances calling in the ping direction
requested floors #= shaft aslevs/R49/Floor Service ## shaft aslevs(Direction : ^dir ).(Floor, Shaft)
// Floor Shaft Direction Bank ## Floor, Shaft, Bank, Stop requested (Floor, Shaft)
// Floor Shaft

// Take the union of requested stops and floors and join with Floor to get heights of each
destination heights #= ( (requested stops.(Floor, Shaft) + requested floors) ## Floor[Name >> Floor] ).(Floor, Height)
// Floor Height

// Find all Accessible Shaft Levels ahead of the cabin
current floor height = /R43/R28/Floor.Height
in.dir? {
    _up:
        // Get the lowest floor at or above the cabin
        nearest dest #= destination heights(1, ^-Height >= current floor height)
    _down:
        // Get the highest floor below the cabin
        nearest dest #= destination heights(1, ^+Height < current floor height)
}
// Since you canâ€™t have two floors at the same height for the same shaft, we have
// at most one row in our table

// Convert to either zero or one instance of ASLEV class and provide as output
=>> Accessible Shaft Level( Floor: nearest dest.Floor; Shaft) // Shaft is assumed to be the Cabin.Shaft
