//
// Cabin.Ping( dir: Direction ) : Acessible Shaft Level
//
// Search ahead of the Cabin in the indicated direction
// return the nearest ASL with a stop request and/or a Floor Service calling
// in that direction. If none is found, return the empty set.

// Get all aslevs that are calling in the search dir or requesting a stop in my shaft
// and extend with the floor number
destinations #= /R2/R28/R3/Accessible Shaft Level( Stop requested OR
    ( /R49/Floor Service, /R49/Floor Service.Direction : in.dir ).(*I) ##
    Floor.(Name >> Floor, Height)
)
// *I1 means project on primary identifier attributes
// >> means rename Name to Floor
// So we get table header { Floor, Shaft, Height }

// Find all Accessible Shaft Levels ahead of the cabin
current floor height = /R43/R28/Floor.Height
in.dir? {
.up:
    dests ahead #= destinations( Height >= current floor height )
.down:
    dests ahead #= destinations( Height < current floor height )
}

// Now get the dest with the least distance from the current floor
best dest #= dests ahead( -^Number.distance(current floor height) )
// -^ restricts to the least value(s)
// In this case we can be confident that zero or one tuple is found

// Return tuple converted into an instance of Accessible Shaft Level
// Returns an empty instance set if no tuple
=>> Accessible Shaft Level( Floor: best dest.Floor, Shaft: best dest.Shaft )
